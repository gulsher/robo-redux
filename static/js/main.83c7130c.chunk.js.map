{"version":3,"sources":["reportWebVitals.js","reducers.js","registerServiceWorker.js","components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundary.jsx","components/Header.jsx","container/App.js","actions.js","constants.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","robots","searchField","isPending","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","Card","props","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","cardArray","map","robot","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hasError","info","setState","Component","Header","nextProps","nextState","user","connect","states","robotsReducer","dispatch","onSearchChange","event","payload","target","value","onRequestRobots","fetch","response","json","users","err","useEffect","filteredRobots","filter","toLowerCase","includes","Header_Header","ErrorBoundary_ErrorBoundary","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","createRoot","document","getElementById","render","StrictMode","es","container_App","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.83c7130c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_FAILED,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_PENDING } from \"./constants\"\n\n\nconst initialState = {\n    robots: [],\n    searchField: '',\n    isPending: true,\n    error: ''\n}\n\n\nexport const robotsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return {\n                ...state,\n                searchField: action.payload\n            }\n        case REQUEST_ROBOTS_PENDING:\n            return {\n                ...state,\n                isPending: true\n            }\n        case REQUEST_ROBOTS_SUCCESS:\n            return {\n                ...state,\n                robots: action.payload,\n                isPending: false\n            }\n        case REQUEST_ROBOTS_FAILED:\n            return {\n                ...state,\n                error: action.payload,\n                isPending: false\n            }\n        default:\n            return state\n    }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react'\n\nexport default function Card(props) {\n   const  {id , name , email } = props\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n        <img src={`https://robohash.org/${id}?set=set2`} alt=\"robot\" />\n        <div>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport Card  from './Card'\n\nexport default function CardList({robots}) {\n\n  const cardArray = robots.map((robot) => {\n    return <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />\n  })\n\n  return (\n    <div>\n      {cardArray}\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function SearchBox({searchField, searchChange}) {\n  return (\n    <div className='pa2'>\n   <input type=\"search\" className=\"pa3 ba b--green bg-light-green\" placeholder=\"Search robots\" onChange={searchChange} />\n   </div>\n  )\n}\n","import React from 'react'\n\nexport default function Scroll(props) {\n  return (\n    <div style={{overflowY:'scroll',border:'1px solid black',height:'500px'}}>\n        {props.children}\n        </div>)\n}\n","import React, { Component } from 'react'\n\nexport default class ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false };\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n         \n    }\n\n\n  render() {\n    if(this.state.hasError) {\n      return <h1>Something went wrong.</h1>\n    }\n    return this.props.children;\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Header extends Component {\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextProps.user !== this.props.user\n    }\n\n  render() {\n    return (\n        <h1>Robo Friends</h1>\n    )\n  }\n}\n","import React,{ useEffect} from 'react'\nimport CardList from '../components/CardList.jsx'\nimport SearchBox from '../components/SearchBox.jsx'\nimport Scroll from '../components/Scroll.jsx'\nimport ErrorBoundary from '../components/ErrorBoundary.jsx'\nimport { connect } from 'react-redux'\nimport { setSearchField,requestRobots} from '../actions'\nimport Header from '../components/Header.jsx'\n\nconst mapStateToProps = states => { \n    console.log(states)\n    return {\n        searchField: states.robotsReducer.searchField,\n        robots: states.robotsReducer.robots,\n        isPending: states.robotsReducer.isPending,\n        error: states.robotsReducer.error\n    }\n}\n\nconst mapDispatchToProps = dispatch => {    \n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}   \n function App(props)  {\n    console.log(props)\n    const {searchField, onSearchChange ,robots ,isPending, onRequestRobots} = props\n   \n    useEffect(() => onRequestRobots(),[])\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n          })\n        if(isPending) {\n            return <h1>Loading</h1>\n        } else {\n  return (\n    <div className='tc'>\n        <Header />\n        <SearchBox  searchChange={onSearchChange} />\n        <Scroll>\n            <ErrorBoundary>\n        <CardList robots={filteredRobots} />\n        </ErrorBoundary>\n        </Scroll>\n    </div>)}\n  \n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD,REQUEST_ROBOTS_FAILED,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_PENDING } from \"./constants\"\n\nexport const setSearchField = (text) => {\n    return {\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n}\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING})\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: users}))\n        .catch(err => dispatch({type: REQUEST_ROBOTS_FAILED,payload: err}))\n}  ","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware , combineReducers} from 'redux';\nimport reportWebVitals from './reportWebVitals';\nimport {robotsReducer} from './reducers'\nimport {createLogger} from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport registerServiceWorker from './registerServiceWorker';\nimport 'tachyons'\n\nimport App from './container/App';\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({robotsReducer})\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nregisterServiceWorker();"],"sourceRoot":""}